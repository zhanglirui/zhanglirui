#spring.application.name=zlr-dome-eureka-client
spring.application.name=spring1
server.port=8902

spring.datasource.url=jdbc:mysql://localhost:3306/dbzhang
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=zhangroot
spring.datasource.password=1qaz2wsx

mybatis.mapper-locations=classpath:mappers/*.xml

#eureka主机名，会在控制页面中显示
eureka.instance.hostname=${spring.cloud.client.hostname}
#eureka注册中心服务器地址
eureka.client.service-url.defaultZone=http://localhost:8900/eureka/
#spring2.ribbon.listOfServers=http://localhost:8901
#定义其在服务端注册
eureka.client.register-with-eureka=true
#定义不从服务器拿服务信息
eureka.client.fetch-registry=false
#服务的唯一表示
eureka.instance.instanceId=${spring.cloud.client.hostname}:${server.port}
#优先获取主机IP
eureka.instance.preferIpAddress=true
#指定每10秒获取一次服务注册信息
eureka.client.registryFetchIntervalSeconds=10

#明确的指定需要发布hystrix.stream
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=hystrix.stream

#Hystrix配置包括默认配置
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds = 30
hystrix.threadpool.default.coreSize = 12


#Hystrix实例的配置参数
hystrix.command.springcloud.execution.isolation.thread.timeoutInMilliseconds = 10
hystrix.threadpool.springcloud.coreSize = 12

#通过下面的方式指定服务端的地址，其中hello是声明的Ribbon Client的名称
#hello.ribbon.listOfServers=http://localhost:8900,http://localhost:8901
#使用配置文件指定的参数比使用@RibbonClient(value="hello", configuration=RibbonConfiguration.class)指定的配置拥有更高的优先级。
#hello.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RoundRobinRule
#如果应用中存在Eureka Client，但不希望通过Eureka Client来获取Ribbon Client对应的服务地址，可以指定ribbon.eureka.enabled=false。
#ribbon.eureka.enabled=false

#Ribbon客户端在发起请求时最多重试两次，第一次调用不算在重试次数中
ribbon.MaxAutoRetries=2
#MaxAutoRetriesNextServer=1，那么会在第一台服务器上最多调用3次，在第二台服务器上也最多调用3次，如果还有第三台服务器，则第三台服务器不会再调用了
ribbon.MaxAutoRetriesNextServer=2
#Ribbon默认只对GET请求进行重试，如果需要对POST请求也进行重试
ribbon.OkToRetryOnAllOperations=true
#retryableStatusCodes来指定需要进行重试的Http状态码
ribbon.retryableStatusCodes=404,502,500


#如下指定了服务hello对应的映射路径是/api/**，即当接收到请求为/api/abc/def时会转发到服务hello对应的/abc/def，因为Zuul在转发时默认会把前缀去掉（默认会去掉*以前的内容）
#通用前缀
zuul.prefix=/api
#通用前缀不去掉
zuul.stripPrefix=false
zuul.routes.spring2=/test/**
#spring2.ribbon.listOfServers=localhost:8900,localhost:8901
#zuul.routes.spring2.url=http://localhost:8901/domeClient/zuul

#需要特定服务路由的前缀也不去掉，可以使用zuul.routes.<serviceId>.stripPrefix=false
    #zuul.routes.hello.stripPrefix=false
#hello服务的路径信息也需要通过zuul.routes.<serviceId>.path来配置
    #zuul.routes.hello.path=/hello/**
#指定最大的连接数为100，默认是200
    #zuul.host.maxTotalConnections=100
#指定Socket的超时时间为3秒，默认是10秒
    #zuul.host.socketTimeoutMillis=3000

#server.port=8888
#zuul.prefix=/api
#zuul.stripPrefix=false
#zuul.routes.hello.path=/hello/**
#zuul.routes.hello.url=http://localhost:8900
#zuul.routes.hello.stripPrefix=false
#不会往底层服务传递user-agent和cache-control这两个Header
    #zuul.sensitiveHeaders=user-agent,cache-control
#不希望user-agent和cache-control这两个Header转发到服务hello，则可以进行如下配置  这个优先级比上面的高
    #zuul.routes.spring2.sensitiveHeaders=user-agent,cache-control
#ignoredHeaders指定的Header将不转发到底层服务，同时将从底层服务的响应中自动移除。如下配置指定了将忽略user-agent和cache-control这两个Header
    #zuul.ignoredHeaders=user-agent,cache-control
#@EnableZuulProxy会自动引入routes和filters这两个Endpoint，可以单独发布这两个Endpoint，也可以通过如下方式发布所有的Endpoint。
#management.endpoints.web.exposure.include=*


#针对某个项目的配置，具有更高的优先级
#feign.client.config.spring2.decoder=com.elim.spring.cloud.client.HelloFeignConfiguration.HelloDecoder
#feign.client.config.spring2.loggerLevel=FULL
#feign.client.config.spring2.connectTimeout=1000
#feign.client.config.spring2.readTimeout=1000
#禁用掉配置文件的属性
#feign.client.default-to-properties=false

#默认的通用配置
#feign.client.config.default.decoder=com.elim.spring.cloud.client.HelloFeignConfiguration.HelloDecoder
#feign.client.config.default.loggerLevel=FULL
#feign.client.config.default.connectTimeout=1000
#feign.client.config.default.readTimeout=1000

#底层使用Apache Http Client的配置
#feign.httpclient.maxConnections=200
#feign.httpclient.maxConnectionsPerRoute=200
#feign.httpclient.timeToLive=600

#feign开启hystrix的功能作用
feign.hystrix.enabled=true
#对请求内容进行压缩
feign.compression.request.enabled=true
#对响应内容进行压缩
feign.compression.response.enabled=true
#指定需要压缩的请求类型
feign.compression.request.mime-types=text/xml,application/xml,application/json
#需要压缩的请求内容的最小值
feign.compression.request.min-request-size=2048

#取值范围是0-1。当取值为0时表示所有请求都不追踪，而取值为1时表示所有请求都进行追踪
spring.sleuth.sampler.probability=1
#如果你不希望获取的服务名称取自spring.application.name，则可以通过spring.zipkin.service.name来指定，比如下面就指定
# 了应用上送span信息到zipkin Server时应用的服务名称为service1。
#spring.zipkin.baseUrl=service1


#指定了消息生产者的topic
spring.cloud.stream.bindings.outputTest.destination=zlr_topic_test
#指定了消息的nameService的地址
spring.cloud.stream.rocketmq.binder.namesrv-addr=127.0.0.1:9876

spring.cloud.stream.bindings.inputTest.destination=zlr_topic_test
spring.cloud.stream.bindings.inputTest.group=test-group

#不希望启用Gateway时可以指定
spring.cloud.gateway.enabled=false

spring.cloud.gateway.routes.id=zlr_gateway
spring.cloud.gateway.routes.uri=http://localhost:8900
spring.cloud.gateway.routes.predicates.Path= /hello/**












